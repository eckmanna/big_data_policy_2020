summary(linear_model)
coeftest(linear_model, vcov. = vcovHC, type = "HC1")
linear_model1=lm(deny~pi+black)
summary(linear_model1)
coeftest(linear_model1, vcov. = vcovHC, type = "HC1")
# estimate the simple probit model
model_probit <- glm(deny ~ pi,
family = binomial(link = "probit"))
coeftest(model_probit, vcov. = vcovHC, type = "HC1")
plot(x = pi,
y = deny,
main = "Probit Model of the Probability of Denial, Given P/I Ratio",
xlab = "P/I ratio",
ylab = "Deny",
pch = 20,
ylim = c(-0.4, 1.4),
cex.main = 0.85)
# add horizontal dashed lines and text
abline(h = 1, lty = 2, col = "darkred")
abline(h = 0, lty = 2, col = "darkred")
text(2.5, 0.9, cex = 0.8, "Mortgage denied")
text(2.5, -0.1, cex= 0.8, "Mortgage approved")
# add estimated regression line
x <- seq(0, 3, 0.01)
y <- predict(model_probit, list(pi = x), type = "response")
lines(x, y, lwd = 1.5, col = "steelblue")
# 1. compute predictions for P/I ratio = 0.3, 0.4
model_probit <- glm(deny ~ pi,
family = binomial(link = "probit"))
predictions = predict(model_probit,
newdata = data.frame("pi" = c(0.3, 0.4)),
type = "response")
# 2. Compute difference in probabilities
diff(predictions)
model_probit1=glm(deny~pi+black, family = binomial(link = "probit"))
coeftest(model_probit1, vcov. = vcovHC, type = "HC1")
newdata = data.frame(pi = 0.3, black=1)
predict(model_probit1, newdata, type="response")
newdata = data.frame(pi = 0.4, black=1)
predict(model_probit1, newdata, type="response")
newdata = data.frame(pi = 0.3, black=0)
predict(model_probit1, newdata, type="response")
newdata = data.frame(pi = 0.4, black=0)
predict(model_probit1, newdata, type="response")
# or:
predictions <- predict(model_probit1,
newdata = data.frame("black" = c(0, 1),
"pi" = c(0.3, 0.3)),
type = "response")
predictions
# Compute difference in probabilities
diff(predictions)
cat("\\newpage")
# estimate the simple logit model
model_logit <- glm(deny ~ pi,
family = binomial(link = "logit"))
summary(model_logit)
# estimate the simple logit model
# plot data
plot(x = pi,
y = deny,
main = "Probit and Logit Models Model of the Probability of Denial, Given P/I Ratio",
xlab = "P/I ratio",
ylab = "Deny",
pch = 20,
ylim = c(-0.4, 1.4),
cex.main = 0.9)
# add horizontal dashed lines and text
abline(h = 1, lty = 2, col = "darkred")
abline(h = 0, lty = 2, col = "darkred")
text(2.5, 0.9, cex = 0.8, "Mortgage denied")
text(2.5, -0.1, cex= 0.8, "Mortgage approved")
# add estimated regression line of Probit and Logit models
x <- seq(0, 3, 0.01)
y_probit <- predict(model_probit, list(pi = x), type = "response")
y_logit <- predict(model_logit, list(pi = x), type = "response")
lines(x, y_probit, lwd = 1.5, col = "steelblue")
lines(x, y_logit, lwd = 1.5, col = "black", lty = 2)
# add a legend
legend("topleft",
horiz = TRUE,
legend = c("Probit", "Logit"),
col = c("steelblue", "black"),
lty = c(1, 2))
# 1. Estimate mode and compute predictions for P/I ratio = 0.3, 0.4
model_logit <- glm(deny ~ pi,
family = binomial(link = "logit"))
predictions = predict(model_logit,
newdata = data.frame("pi" = c(0.3, 0.4)),
type = "response")
# 2. Compute difference in probabilities
diff(predictions)
model_logit2 <- glm(deny ~ pi+ black,
family = binomial(link = "logit"))
summary(model_logit2)
predictions = predict(model_logit2,
newdata = data.frame("pi" = c(0.3, 0.3),
"black" = c(0, 1)),
type = "response")
# Compute difference in probabilities
diff(predictions)
predictions2 = predict(model_logit2,
newdata = data.frame("black" = c(0, 1),
"pi" = c(0.6, 0.6)),
type = "response")
# Compute difference in probabilities
diff(predictions2)
summary(model_probit)
# compute pseudo-R2 for the probit and logit model of mortgage denial
pseudoR2_probit <- 1 - (model_probit$deviance) / (model_probit$null.deviance)
pseudoR2_probit
pseudoR2_logit <- 1 - (model_logit$deviance) / (model_logit$null.deviance)
pseudoR2_logit
cumsum(1:10)
library(plm)
rm(list=ls())
# Load relevant packages
library(tidyverse)
library(haven)
library(estimatr)
library(stargazer)
library(plm)
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data")
# Load in data
data = read_csv("Cumm_and_ann_installed_cap_nach_bundesland.csv")
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
getwd()
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data")
getwd()
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
getwd()
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
getwd()
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
getwd()
rm(list=ls())
# Load relevant packages
library(tidyverse)
library(haven)
library(estimatr)
library(stargazer)
library(plm)
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data")
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data")
getwd()
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
rm(list=ls())
# Load relevant packages
library(tidyverse)
library(haven)
library(estimatr)
library(readxl)
library(plm)
library(stargazer)
library(Synth)
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
getwd()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
# set global ggplot theme
theme_set(theme_bw())
rm(list=ls())
setwd("C:/Users/gehwo/polybox/Shared/Project Big Data/synthetic control method/")
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
getwd()
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
rm(list=ls())
# Load relevant packages
library(tidyverse)
library(haven)
library(estimatr)
library(stargazer)
library(AER)
library(readxl)
library(texreg)
library(plm)
library(Synth)
library(readxl)
setwd("C:/Users/Andi Eckmann/Desktop/Big Data Course Project/Daten/")
data1 = read_excel("190703_MaStRDaten_MIGRATION_Teil1.xlsx", sheet = "Tabelle_ENH_Teil_1")
rm(list=ls())
# Load relevant packages
library(tidyverse)
library(haven)
library(estimatr)
library(stargazer)
library(AER)
library(readxl)
library(texreg)
library(plm)
# Data to load:
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Statistics 2/R")
data = read_csv("water data.csv")
attach(data)
str(data)
summary(data)
sum(is.na(data))
sum(is.na(data$treatment)) #number of households not assigned to treatment or control group (NA)
detach(data)
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
View(data)
# Load in data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
attach(data)
str(data)
summary(data)
dim(data)
data[1:14, 1:4]
summary(Installed_Cap)
boxplot(Installed_Cap)
summary(cum_installed_cap)
boxplot(cum_installed_cap)
ggplot(data = data) +
geom_line(mapping = aes(x = year, y = Installed_Cap, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = FALSE)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = Installed_Cap, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = FALSE)
```{r}
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = cum_installed_Cap, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = FALSE)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = cum_installed_cap, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = FALSE)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = Installed_Cap, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = TRUE)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = cum_installed_cap, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = TRUE)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = Installed_Cap, color= ENH_Bundesland),
show.legend = TRUE)
model_ols = lm(Installed_Cap~`feed-in`)
coeftest(model_ols)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = cum_installed_cap_pc, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = TRUE)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = cum_installed_cap_pa, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = TRUE)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
model_ols = lm(Installed_Cap_pc~`feed-in`)
coeftest(model_ols)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
View(data)
df1 = df1 %>%
mutate(Installed_Cap_pc=Installed_Cap_pc*10^6)
data = data %>%
mutate(Installed_Cap_pc=Installed_Cap_pc*10^6)
model_ols = lm(Installed_Cap_pc~`feed-in`)
coeftest(model_ols)
View(data)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
View(data)
data = data %>%
mutate(Installed_Cap_pc=Installed_Cap_pc*10^6)
model_ols = lm(Installed_Cap_pc~`feed-in`)
coeftest(model_ols)
data = data %>%
mutate(Installed_Cap_pc=Installed_Cap_pc*10^6)
attach(data)
model_ols = lm(Installed_Cap_pc~`feed-in`)
coeftest(model_ols)
data = data %>%
mutate(Installed_Cap_pc=Installed_Cap_pc*10^6)
attach(data)
model_ols = lm(Installed_Cap_pc~`feed-in`)
coeftest(model_ols)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
data = data %>%
mutate(Installed_Cap_pc=Installed_Cap_pc*10^6)
model_ols = lm(Installed_Cap_pc~`feed-in`, data = data)
coeftest(model_ols)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
plot(`feed-in`, Installed_Cap_pc, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
data = data %>%
mutate(Installed_Cap_pc=Installed_Cap_pc*10^6)
hist(Installed_cap_pc)
data = data %>%
mutate(Installed_Cap_pc=Installed_Cap_pc*10^6)
hist(Installed_Cap_pc)
View(data)
rm(list=ls())
# Load relevant packages
library(tidyverse)
library(haven)
library(estimatr)
library(readxl)
library(plm)
library(stargazer)
library(Synth)
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
# Read data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
rm(list=ls())
# Load relevant packages
library(tidyverse)
library(haven)
library(estimatr)
library(readxl)
library(plm)
library(stargazer)
library(Synth)
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
# Read data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Read data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
getwd()
attach(data)
str(data)
summary(data)
dim(data)
data[1:14, 1:4]
summary(Installed_Cap)
boxplot(Installed_Cap)
summary(cum_installed_cap)
boxplot(cum_installed_cap)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = Installed_Cap, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = TRUE)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = cum_installed_cap, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = TRUE)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = cum_installed_cap_pc, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = TRUE)
ggplot(data = data) +
geom_line(mapping = aes(x = Jahr, y = cum_installed_cap_pa, linetype = ENH_Bundesland, color= ENH_Bundesland),
show.legend = TRUE)
data = data %>%
mutate(Installed_Cap_pc2=Installed_Cap_pc*10^6)
hist(Installed_Cap_pc2)
View(data)
data = data %>%
mutate(Installed_Cap_pc2=Installed_Cap_pc*10^6)
hist(Installed_Cap_pc2, data)
data = data %>%
mutate(Installed_Cap_pc2=Installed_Cap_pc*10^6)
hist(Installed_Cap_pc2, data=data)
data = data %>%
mutate(Installed_Cap_pc2=Installed_Cap_pc*10^6)
hist(Installed_Cap_pc2, data)
View(data)
data = data %>%
mutate(Installed_Cap_pc2=Installed_Cap_pc*10^6)
attach(data)
hist(Installed_Cap_pc2)
model_ols = lm(Installed_Cap_pc2~`feed-in`, data = data)
coeftest(model_ols)
summary(Installed_Cap_pc2)
plot(`feed-in`, Installed_Cap_pc2, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
View(data)
plot(Installed_Cap_pc2, `feed-in`, col="blue", xlab = "Installed_cap_pc [W/1000cap]", ylab="feed-in")
abline(model_ols, col=3, lwd=3)
plot(`feed-in`, Installed_Cap_pc2, col="blue", xlab = "feed-in", ylab="Installed_cap_pc [W/1000cap]")
abline(model_ols, col=3, lwd=3)
#no need to add dummy variable, just add states
model_state = lm(Installed_Cap_pc2 ~ `feed-in` + ENH_Bundesland)
summary(model_state)
Installed_Cap_pc2_predict = predict(model_state)
ggplot(data = data) +
geom_line(mapping = aes(x = `feed-in`, y = Installed_Cap_pc2, color = state),
show.legend = FALSE)
Installed_Cap_pc2_predict = predict(model_state)
ggplot(data = data) +
geom_line(mapping = aes(x = `feed-in`, y = Installed_Cap_pc2, color = ENH_Bundesland),
show.legend = TRUE)
Installed_Cap_pc2_predict = predict(model_state)
ggplot(data = data) +
geom_line(mapping = aes(x = `feed-in`, y = Installed_Cap_pc2_predict, color = ENH_Bundesland),
show.legend = TRUE)
Installed_Cap_pc2_predict = predict(model_state)
ggplot(data = data) +
geom_line(mapping = aes(x = `feed-in`, y = Installed_Cap_pc2_predict, color = ENH_Bundesland),
show.legend = TRUE)
data2 = data %>%
filter(Jahr < 2020)
mutate(Installed_Cap_pc2=Installed_Cap_pc*10^6)
View(data2)
data2 = data %>%
filter(Jahr < 2020) %>%
mutate(Installed_Cap_pc2=Installed_Cap_pc*10^6)
attach(data2)
hist(Installed_Cap_pc2)
summary(Installed_Cap_pc2)
View(data2)
model_ols = lm(Installed_Cap_pc2~`feed-in`, data = data2)
coeftest(model_ols)
plot(`feed-in`, Installed_Cap_pc2, col="blue", xlab = "feed-in", ylab="Installed_cap_pc [W/1000cap]")
abline(model_ols, col=3, lwd=3)
#no need to add dummy variable, just add states
model_state = lm(Installed_Cap_pc2 ~ `feed-in` + ENH_Bundesland)
summary(model_state)
Installed_Cap_pc2_predict = predict(model_state)
ggplot(data = data2) +
geom_line(mapping = aes(x = `feed-in`, y = Installed_Cap_pc2_predict, color = ENH_Bundesland),
show.legend = TRUE)
data2 %>%
group_by(ENH_Bundesland, Jahr) %>%
summarize(mean_Installed_Cap_pc2 = mean(Installed_Cap_pc2)) %>%
ggplot(aes(x = Jahr, y = mean_Installed_Cap_pc2,
group = ENH_Bundesland, colour = ENH_Bundesland)) +
geom_point() +
geom_line() +
xlab("Year") + ylab("Mean fatality") +
scale_colour_viridis_d("State", end = 0.7)
View(data2)
data2 = data2 %>%
group_by(ENH_Bundesland, Jahr) %>%
summarize(mean_Installed_Cap_pc2 = mean(Installed_Cap_pc2)) %>%
ggplot(aes(x = Jahr, y = mean_Installed_Cap_pc2,
group = ENH_Bundesland, colour = ENH_Bundesland)) +
geom_point() +
geom_line() +
xlab("Year") + ylab("Mean fatality") +
scale_colour_viridis_d("State", end = 0.7)
View(data2)
View(data2)
data2 %>%
group_by(ENH_Bundesland, Jahr) %>%
summarize(mean_Installed_Cap_pc2 = mean(Installed_Cap_pc2)) %>%
ggplot(aes(x = Jahr, y = mean_Installed_Cap_pc2,
group = ENH_Bundesland, colour = ENH_Bundesland)) +
geom_point() +
geom_line() +
xlab("Year") + ylab("Mean fatality") +
scale_colour_viridis_d("State", end = 0.7)
rm(list=ls())
# Load relevant packages
library(tidyverse)
library(haven)
library(estimatr)
library(readxl)
library(plm)
library(stargazer)
library(Synth)
# Setting Working Directory
setwd("C:/Users/Andi Eckmann/Desktop/ETH Studium/MASTERSTUDIUM/2. Semester/Big Data for Public Policy/big_data_policy_2020/course_project/data/")
getwd()
# Read data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Read data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Read data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
# Read data
data = read_excel("Cumm_and_ann_installed_cap_nach_bundesland.xlsx")
getwd()=
getwd()
